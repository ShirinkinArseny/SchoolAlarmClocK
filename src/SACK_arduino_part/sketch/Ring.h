#ifndef Ring_header_check
#define Ring_header_check

#include <Arduino.h>

/*
  
  Храним время в 2 байтах
  
  Первый бит звонка обозначает длительность.
  Второй бит звонка - маркер терминирующего звонка.
  Оставшиеся 14 бит задают время начала звонка.
  Время начала звонка в секундах от начала дня равно (memoryRepresentation & 0b0011111111111111)*10.
  Таким образом, точность установки времени звонка = 10 секундам.
  Звонок, все биты которого равны 1, считаем пустым и используем для обозначения конца массивов звонков.
  
  Хранение звонков в ПЗУ:
  
  Звонки и ссылки на них в расписании хранятся отдельно.
  Дни хранят абсолютный номер звонка. Всего возможно 256 различных звонков (с разным временем и длительностью).
  Если несколько дней имеют звонок в одно и то же время, то они все ссылаются на один и тот же звонок.
  Таким образом мы храним 2 байта на звонок + колчиство_дней байт ссылок на звонок. 
  
   0     ---  количество звонков в понедельник
   1    |     абсолютный номер первого звонок в понедельник
   2    |     абсолютный номер второго звонок в понедельник
   3    |     абсолютный номер третьего звонок в понедельник
   4    |     абсолютный номер четвёртого звонок в понедельник
   ...  |     ...
   70   |---  количество звонков во вторник
   ...  |     ...
   141  |---  количество звонков в среду
   ...  |     ...
   212  |---  количество звонков в четверг
   ...  |     ...
   283  |---  количество звонков в пятницу
   ...  |     ...
   354  |---  количество звонков в субботу
   ...  |     ...
   425  |---  количество звонков в воскресенье
   ...  |     ...
   496  |---  ПУСТО
   ...  |     ...
   510  |---  число таймстампов звонков
   511  |     первый байт первого звонка
   512  |     второй байт первого звонка
   513  |     первый байт второго звонка
   514  |     второй байт второго звонка
   515  |     первый байт третьего звонка
   516  |     второй байт третьего звонка
   ...  |     ...
   1023  ---
*/

  class Ring {
      public:    
          
          /*
          Создаём звонок из двух хранимых байт (из представления в памяти)
          */
          Ring (uint16_t memoryRepresentation);
                  
          /*
          Создаём звонок из его времени
          */
          Ring (byte hours, byte minutes, byte seconds);
          
          /*
          Получаем представление в памяти
          */
          uint16_t getMemoryRepresentation();

          /*
          Сохраняем звонок в пзу по заданному индексу звонка
          */
          void writeToEEPROM(byte index);
          
          /*
          Узнаём, действительно ли звонок существует (или это просто маркер конца массива)
          */
          boolean isEmpty();

          /*
          Узнаём, короткий ли звонок
          */
          boolean isShort();

          /*
          Получаем количество секунд от начала дня
          */
          long getSecondFromDayStart();
          
          /*
          Получаем относительную длительность звонка (от 1 до 4)
          */
          byte getTimeLength();
	  
          /*
          Получаем секунды
          */
          byte getSecond();
          
          /*
          Получаем минуты
          */
          byte getMinute();
          
          /*
          Получаем часы
          */
          byte getHour();
          
      private:      
        
          uint16_t memoryRepresentation;
  };


  /*
  Пишем в ПЗУ ссылку на звонок в дне
  */
  void writeDayRingToEEPROM(byte day, byte dayRingNumber, byte ringNumber);

  /*
  Пишем в ПЗУ количество звонков в дне
  */
  void writeDayRingsNumberToEEPROM(byte day, byte ringsNumber);

  /*
  Пишем в ПЗУ количество таймстампов звонков
  */
  void writeTimeStampsCountToEEPROM(byte tsCount);

  /*
  Загружаем все звонки за день недели (пн - 0, вт - 1 и т.д.)
  После использования нужно удалять!
  */
  Ring* getDayRings(byte dayOfWeek);

  /*
  Загружаем ссылки дня на таймстампы звонков.
  После использования нужно удалять!
  */
  byte* getDayMemoryRepresentation(byte dayOfWeek);

  /*
  Таймстамп по его номеру и смещению
  */
  byte getRingTimeStamp(byte index, byte bytenum);

  /*
  Количество таймстампов звонков
  */
  byte getRingsTimeStampsNumber();

  /*
  Пишем в ПЗУ стандартное расписание и стандартные звонки
  */   
  void writeDefaultRings();

#endif